install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install_github('ramnathv/rCharts@dev')
install.packages("base64enc")
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
library(Quandl)
install.packages("Quandl")
library(reshape2)
library(Quandl)
library(knitr)
library(plyr)
library(dplyr)
library(rCharts)
vcData = Quandl("FBI_UCR/USCRIME_TYPE_VIOLENTCRIMERATE")
class(vcData)
kable(head(vcData[,1:9]), format = 'html', table.attr = "class=nofluid")
datm = melt(vcData, 'Year', # "Year" here set as "id variable"
variable.name = 'State',
# the rest variables are those you want to stack as 'State'
value.name = 'Crime')
# values are named with 'Crime' and form the new column
datm2 = subset(na.omit(datm), #handle missing values: omit
!(State %in% c("United States", "District of Columbia")))
which(is.na(datm))
temp = c(as.matrix(datm))
temp[which(is.na(datm))]
datm = datm2
rm(datm2)
datm2 = transform(datm,
State = state.abb[match(as.character(State), state.name)],
fillKey = cut(Crime, quantile(Crime, seq(0, 1, 1/5)), labels = LETTERS[1:5]),
Year = as.numeric(substr(Year, 1, 4))) #extract the 4 characters of each 'Year'
# Now you have a new table to embed
kable(head(datm2), format = 'html', table.attr = "class=nofluid")
#format fill for map
fills = setNames( #Set the Names in an Object
c(RColorBrewer::brewer.pal(5, 'YlOrRd'), 'white'),
c(LETTERS[1:5], 'defaultFill')
)
dat2 = dlply(na.omit(datm2), "Year", function(x)
{
y = toJSONArray2(x, json=FALSE) #json=FALSE to get the large list; json=TRUE to get a json array
names(y) = lapply(y, '[[', 'State') #lapply also return a list
# this step extracts the state abbreviations
return(y)
})
# Now data is ready --> let's plot
#Simplest rChart example: static map (other option: ggmap)
options(rcharts.cdn = TRUE) #option to have interactive plot
map = Datamaps$new()
map$set(
dom = 'chart_1',
scope = 'usa',
fills = fills,
data = dat2[[1]],
legend = TRUE,
labels = TRUE
)
map
install.packages("leaflet")
library(leaflet)
m = leaflet() %>% # pipe operator (%>%)
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-73.9613, lat=40.8084, popup="Columbia University")
m
m = leaflet()
m = addTiles(m)
m = addMarkers(m, lng=-73.9613, lat=40.8084, popup="Columbia University")
m
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
maptristates = map('state', region = c('new york', 'new jersey', 'penn'), fill = TRUE, plot = FALSE)
leaflet(data = maptristates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(3, alpha = NULL), stroke = FALSE)
m <- leaflet() %>% setView(lng=-73.9613, lat=40.8084, zoom = 10)
m %>% addTiles()
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("CartoDB.Positron")
leaflet() %>% addTiles() %>% setView(-73.9613, 40.8084, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data Â© 2012 IEM Nexrad"
)
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)
) %>%
addProviderTiles("Stamen.TonerLabels")
data(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
myIcon <- makeIcon(
iconUrl = "https://cdn0.iconfinder.com/data/icons/disaster-blaster/250/Volcanic-eruption-512.png",
iconWidth = 40, iconHeight = 45,
iconAnchorX = 22, iconAnchorY = 94
)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = myIcon)
quakes1 <- quakes[1:20,]
myIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"https://cdn3.iconfinder.com/data/icons/basic-mobile-part-2/512/volcano-128.png",
"https://cdn0.iconfinder.com/data/icons/disaster-blaster/250/Volcanic-eruption-512.png"
),
iconWidth = 40, iconHeight = 45,
iconAnchorX = 22, iconAnchorY = 94
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = myIcons)
oceanIcons <- iconList(
ship = makeIcon(iconUrl="https://image.freepik.com/free-icon/ocean-transportation_318-61537.png",
iconWidth = 40, iconHeight = 40),
pirate = makeIcon(iconUrl = "https://anthonylugo.files.wordpress.com/2013/03/pirate.jpg",
iconWidth = 40, iconHeight = 40)
)
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
leaflet(df) %>% addTiles() %>% addCircleMarkers()
pal <- colorFactor(c("navy", "red"), domain = c("ship", "pirate"))
leaflet(df) %>% addTiles() %>%
addCircleMarkers(
radius = ~ifelse(type == "ship", 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
library(rMaps)
L2 = Leaflet$new()
# setView() sets the center of the map view and the zoom level;
L2$setView(c(29.7632836,  -95.3632715), 10)
L2$tileLayer(provider = "MapQuestOpen.OSM")
L2
data(crime, package = 'ggmap')
library(plyr)
crime_dat = ddply(crime, .(lat, lon), summarise, count = length(address))
crime_dat = toJSONArray2(na.omit(crime_dat), json = F, names = F)
cat(rjson::toJSON(crime_dat[1:2]))
L2$addAssets(jshead = c("http://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"))
L2$setTemplate(afterScript = sprintf("
<script>
var addressPoints = %s
var heat = L.heatLayer(addressPoints).addTo(map)
</script>
", rjson::toJSON(crime_dat)
))
L2
options(rcharts.cdn = TRUE) #option to have interactive plot
map = Datamaps$new()
map$set(
dom = 'chart_1',
scope = 'usa',
fills = fills,
data = dat2[[1]],
legend = TRUE,
labels = TRUE
)
map
dat2[1]
m = leaflet() %>% # pipe operator (%>%)
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-73.9613, lat=40.8084, popup="Columbia University")
m
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2)))
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
maptristates = map('state', region = c('new york', 'new jersey', 'penn'), fill = TRUE, plot = FALSE)
leaflet(data = maptristates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(3, alpha = NULL), stroke = FALSE)
m <- leaflet() %>% setView(lng=-73.9613, lat=40.8084, zoom = 10)
m %>% addTiles()
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("CartoDB.Positron")
leaflet() %>% addTiles() %>% setView(-73.9613, 40.8084, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data Â© 2012 IEM Nexrad"
)
library(lattice)
library(devtools)
install_github("vqv/ggbiplot")
data(cars)
View(cars)
data("mtcars")
View(mtcars)
mtcars$model = row.names(mtcars)
str(mtcars)
mtcars[mtcars$model == "Valiant",]$model = 1
normalize(cars)
shiny::runApp('GitHub/EDAV_proj3/shiny code')
install.packages("plotly")
shiny::runApp('GitHub/EDAV_proj3/shiny code')
install.packages("choroplethr")
shiny::runApp('GitHub/EDAV_proj3/shiny code')
install.packages("choroplethrZip")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
library(devtools)
install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
install.packages("DT")
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='xxiao',
token='8FFFBAA0D360990EBE6E4FD7992FEBCD',
secret='<SECRET>')
rsconnect::setAccountInfo(name='xxiao', token='8FFFBAA0D360990EBE6E4FD7992FEBCD', secret='/ZTJjTEg84NA5JI7zvEUUrzIpL7pPIkvxCC0Otnf')
getwd()
rsconnect::deployApp('/GitHub/EDAV_proj3/shiny code')
rsconnect::deployApp('~/GitHub/EDAV_proj3/shiny code')
rsconnect::deployApp('~/GitHub/EDAV_proj3/shiny code')
rsconnect::setAccountInfo(name='xxiao', token='8FFFBAA0D360990EBE6E4FD7992FEBCD', secret='/ZTJjTEg84NA5JI7zvEUUrzIpL7pPIkvxCC0Otnf')
rsconnect::deployApp('~/GitHub/EDAV_proj3/shiny code')
rsconnect::setAccountInfo(name='xxiao', token='8FFFBAA0D360990EBE6E4FD7992FEBCD', secret='/ZTJjTEg84NA5JI7zvEUUrzIpL7pPIkvxCC0Otnf')
rsconnect::deployApp('~/GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
shiny::runApp('GitHub/EDAV_proj3/shiny code')
31503+4509
315030+4509
315030+4509+1500
500+501+31503
500+501+ 31503
5000/3
1667*3
1667*10*9
167*10*9
11670*3
5000/3
1667*2
9*3*(501+10000)
167*(9+16)
1500+4509+283527
167*9
283527/9
505010+500+1670
305010+500+1670
500+170+30501
315030+1500+5010
5000+16700+350100
5000+1667+305001+1000
1667+1000
315000+100000+100000
100000+2000
1000000/160
1-(1-1/10e6)^10^6
(1-(1-1/10e6)^10^6)^6
(1-(1-1/10e5)^10^6)^6
(1-(1-1/10e4)^10^6)^6
(1-(1-1/10e5)^10^6)^6
(1-(1-1/10e5)^10^6)^3
(1-(1-1/10e6)^10^6)^3
(1-(1-1/10e5)^10^6)^3
(1-(1-1/(2*10e5))^10^6)^3
(1-(1-1/(2*10e5))^10)^3
(1-(1-1/(2*10e5))^(10e6))^3
(1-(1-1/(10e6))^(10e6))^3
(1-(1-1/(2*10e))^(10e6))^3
(1-(1-1/(2*10e6))^(10e6))^3
(1-(1-1/(1.6*10e6))^(10e6))^3
d = c(5000,1000,100000,1100,303300,2000)
t = c(1000,1100,2000)
sum(d)
sum(t)
sum(100000,10000,5000,5000,315000,2000)
sum(10000,5000,2000)
sum(5000,1667,4*1667,1667,334,334,301002,1000,18000,2000)
sum(334,1000,2000)
sum(100000,25000,4*25000,25000,25000,90000,103000,2000)
sum(25000,5000,2000)
sum(100000,25000,4*25000,25000,25000,90000,5000,315000,2000)
install.packages("openNLP")
require('wordcloud')
require('biclust')
require('cluster')
require('igraph')
require('dplyr')
require('scales')
require('SnowballC')
require('RColorBrewer')
require('ggplot2')
require('tm')
install.packages("biclust")
install.packages("igraph")
install.packages("SnowballC")
install.packages("Rgraphviz")
install.packages("fpc")
source("https://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
install.packages("cluster")
require('wordcloud')
require('biclust')
require('cluster')
require('igraph')
require('dplyr')
require('scales')
require('SnowballC')
require('RColorBrewer')
require('ggplot2')
require('tm')
# source("https://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz")
require('Rgraphviz')
require('fpc'
install.packages("Rcpp")
install.packages("Rcpp")
require('dplyr')
require('wordcloud')
require('biclust')
require('cluster')
require('igraph')
require('dplyr')
require('scales')
require('SnowballC')
require('RColorBrewer')
require('ggplot2')
require('tm')
# source("https://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz")
require('Rgraphviz')
require('fpc')
（.1-1）180
(.1-1）180
(.1-1/180
)
(.1-1)/180
(.3-1)/50
.5/20
-1.4e10-2
-1.4e-2
-1.4e-2>-2.5e-2
-1.4e-2>-2.5e-2 |-2.5e-2>-5e-3
-1.4e-2>-2.5e-2 &-2.5e-2>-5e-3
-2.5e-2>-1.4e-2> & -2.5e-2<-5e-3
-2.5e-2>-1.4e-2 & -2.5e-2<-5e-3
-2.5e-2 > -1.4e-2 & -2.5e-2< -5e-3
-2.5e-2 > -1.4e-2
-2.5e-2 < -1.4e-2 & -2.5e-2< -5e-3
0.8>6e-3 & 6e-3>9e-4
0.8>6e-3 & 6e-3>9e-4 & 9e-4>1.98e-4
2.5e-2>1.4e-2 & 1.4e-2>5e-3
18*.15
15*0.015
0.045*18
.3+.225+.81
.3+.0225+.081
.015*15
.3+.225+.081
require('wordcloud')
require('biclust')
require('cluster')
require('igraph')
require('dplyr')
require('scales')
require('SnowballC')
require('RColorBrewer')
require('ggplot2')
require('tm')
require('Rgraphviz')
require('fpc')
docs[1][1]
require('wordcloud')
require('biclust')
require('cluster')
require('igraph')
require('dplyr')
require('scales')
require('SnowballC')
require('RColorBrewer')
require('ggplot2')
require('tm')
require('Rgraphviz')
require('fpc')
setwd("C:/Users/oweni/OneDrive/Documents/GitHub/textViz")
mypwd = "C:/Users/oweni/OneDrive/Documents/GitHub/textViz/data"
docs = Corpus(DirSource(mypwd))
docs[1][1]
docs[1][1][1]
docs[[1]]
docs[[1]][1]
str(docs[[1]])
str(docs[[1]][1])
str(docs[[1]]$content)
documents <- Corpus(VectorSource(paste(docs[[1]]$content,collapse='\n')))
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n')),"***",fixed=TRUE)[[1]]))
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n')),"***",fixed=TRUE)[[1]])
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
documents[[225]]
documents[[225]]$content
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse=''),"***",fixed=TRUE)[[1]]))
documents[[225]]
documents[[225]]$content
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
documents[[225]]$content
dtm = DocumentTermMatrix(documents[[225]])
dtm = DocumentTermMatrix(documents[225])
dtm
dim(dtm)
dtm = DocumentTermMatrix(documents[223:225])
dtm
2016-1970
225-46
documents[[179]]
documents[[179]]$content
doc_target = documents[[180:]]
doc_target = documents[[180:225]]
doc_target = documents[180:]
doc_target = documents[180:225]
dtm = DocumentTermMatrix(doc_target)
dtm
inspect(dtm[1:5,1:6])
inspect(dtm[1:5,1:20])
docs <- tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeNumbers)
docs = tm_map(docs, removePunctuation)
docs = tm_map(docs, removeWords, stopwords("english"))
docs = tm_map(docs,stemDocument)
docs = tm_map(docs,stripWhitespace)
docs = tm_map(docs,PlainTextDocument)
docs[[1]]$content
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
doc_target = documents[180:225]
dtm = DocumentTermMatrix(doc_target)
documents <- Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
doc_target = documents[180:225]
str(doc_target)
class(doc_target)
documents = Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
doc_target = documents[180:225]
documents[1]
documents[[1]]
docs = Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
docs = Corpus(DirSource(mypwd))
docs = Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeNumbers)
docs = tm_map(docs, removePunctuation)
docs = tm_map(docs, removeWords, stopwords("english"))
docs = tm_map(docs, stemDocument)
docs = tm_map(docs, stripWhitespace)
docs = tm_map(docs, PlainTextDocument)
doc_target = docs[180:225]
m
dtm = DocumentTermMatrix(doc_target)
dtm
inspect(dtm[1:5,1:20])
docs = Corpus(DirSource(mypwd))
docs = Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
paste("name", 1:3, sep = "")
docs = Corpus(DirSource(mypwd))
docs = Corpus(VectorSource(strsplit(paste(docs[[1]]$content,collapse='\n'),"***",fixed=TRUE)[[1]]))
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeNumbers)
docs = tm_map(docs, removePunctuation)
docs = tm_map(docs, removeWords, stopwords("english"))
docs = tm_map(docs, stemDocument)
docs = tm_map(docs, stripWhitespace)
docs = tm_map(docs, PlainTextDocument)
doc_target = docs[180:225]
names(doc_target) = paste("year", 1970:2016, sep = " ")
dtm = DocumentTermMatrix(doc_target)
dtm
inspect(dtm[1:5,1:20])
